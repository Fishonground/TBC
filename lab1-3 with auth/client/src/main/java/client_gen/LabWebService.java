
package client_gen;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "LabWebService", targetNamespace = "http://server/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface LabWebService {


    /**
     * 
     * @return
     *     returns java.util.List<client_gen.God>
     * @throws MySQLException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllGods", targetNamespace = "http://server/", className = "client_gen.GetAllGods")
    @ResponseWrapper(localName = "getAllGodsResponse", targetNamespace = "http://server/", className = "client_gen.GetAllGodsResponse")
    @Action(input = "http://server/LabWebService/getAllGodsRequest", output = "http://server/LabWebService/getAllGodsResponse", fault = {
        @FaultAction(className = MySQLException.class, value = "http://server/LabWebService/getAllGods/Fault/MySQLException")
    })
    public List<God> getAllGods()
        throws MySQLException
    ;

    /**
     * 
     * @param name
     * @return
     *     returns java.util.List<client_gen.God>
     * @throws MySQLException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getGodByName", targetNamespace = "http://server/", className = "client_gen.GetGodByName")
    @ResponseWrapper(localName = "getGodByNameResponse", targetNamespace = "http://server/", className = "client_gen.GetGodByNameResponse")
    @Action(input = "http://server/LabWebService/getGodByNameRequest", output = "http://server/LabWebService/getGodByNameResponse", fault = {
        @FaultAction(className = MySQLException.class, value = "http://server/LabWebService/getGodByName/Fault/MySQLException")
    })
    public List<God> getGodByName(
        @WebParam(name = "name", targetNamespace = "")
        String name)
        throws MySQLException
    ;

    /**
     * 
     * @param culture
     * @return
     *     returns java.util.List<client_gen.God>
     * @throws MySQLException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getGodsByCulture", targetNamespace = "http://server/", className = "client_gen.GetGodsByCulture")
    @ResponseWrapper(localName = "getGodsByCultureResponse", targetNamespace = "http://server/", className = "client_gen.GetGodsByCultureResponse")
    @Action(input = "http://server/LabWebService/getGodsByCultureRequest", output = "http://server/LabWebService/getGodsByCultureResponse", fault = {
        @FaultAction(className = MySQLException.class, value = "http://server/LabWebService/getGodsByCulture/Fault/MySQLException")
    })
    public List<God> getGodsByCulture(
        @WebParam(name = "culture", targetNamespace = "")
        String culture)
        throws MySQLException
    ;

    /**
     * 
     * @param culture
     * @param name
     * @param id
     * @param power
     * @param godOf
     * @return
     *     returns java.util.List<client_gen.God>
     * @throws MySQLException
     * @throws EmptyArgException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createNewGod", targetNamespace = "http://server/", className = "client_gen.CreateNewGod")
    @ResponseWrapper(localName = "createNewGodResponse", targetNamespace = "http://server/", className = "client_gen.CreateNewGodResponse")
    @Action(input = "http://server/LabWebService/createNewGodRequest", output = "http://server/LabWebService/createNewGodResponse", fault = {
        @FaultAction(className = EmptyArgException.class, value = "http://server/LabWebService/createNewGod/Fault/EmptyArgException"),
        @FaultAction(className = MySQLException.class, value = "http://server/LabWebService/createNewGod/Fault/MySQLException")
    })
    public List<God> createNewGod(
        @WebParam(name = "id", targetNamespace = "")
        int id,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "culture", targetNamespace = "")
        String culture,
        @WebParam(name = "power", targetNamespace = "")
        String power,
        @WebParam(name = "god_of", targetNamespace = "")
        String godOf)
        throws EmptyArgException, MySQLException
    ;

    /**
     * 
     * @param godOf
     * @return
     *     returns java.util.List<client_gen.God>
     * @throws MySQLException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getGodsByGodOf", targetNamespace = "http://server/", className = "client_gen.GetGodsByGodOf")
    @ResponseWrapper(localName = "getGodsByGodOfResponse", targetNamespace = "http://server/", className = "client_gen.GetGodsByGodOfResponse")
    @Action(input = "http://server/LabWebService/getGodsByGodOfRequest", output = "http://server/LabWebService/getGodsByGodOfResponse", fault = {
        @FaultAction(className = MySQLException.class, value = "http://server/LabWebService/getGodsByGodOf/Fault/MySQLException")
    })
    public List<God> getGodsByGodOf(
        @WebParam(name = "god_of", targetNamespace = "")
        String godOf)
        throws MySQLException
    ;

    /**
     * 
     * @param culture
     * @param name
     * @param id
     * @param power
     * @param godOf
     * @return
     *     returns java.lang.String
     * @throws MySQLException
     * @throws EmptyArgException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateGod", targetNamespace = "http://server/", className = "client_gen.UpdateGod")
    @ResponseWrapper(localName = "updateGodResponse", targetNamespace = "http://server/", className = "client_gen.UpdateGodResponse")
    @Action(input = "http://server/LabWebService/updateGodRequest", output = "http://server/LabWebService/updateGodResponse", fault = {
        @FaultAction(className = MySQLException.class, value = "http://server/LabWebService/updateGod/Fault/MySQLException"),
        @FaultAction(className = EmptyArgException.class, value = "http://server/LabWebService/updateGod/Fault/EmptyArgException")
    })
    public String updateGod(
        @WebParam(name = "id", targetNamespace = "")
        int id,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "culture", targetNamespace = "")
        String culture,
        @WebParam(name = "power", targetNamespace = "")
        String power,
        @WebParam(name = "god_of", targetNamespace = "")
        String godOf)
        throws EmptyArgException, MySQLException
    ;

    /**
     * 
     * @param id
     * @return
     *     returns java.lang.String
     * @throws MySQLException
     * @throws EmptyArgException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteGod", targetNamespace = "http://server/", className = "client_gen.DeleteGod")
    @ResponseWrapper(localName = "deleteGodResponse", targetNamespace = "http://server/", className = "client_gen.DeleteGodResponse")
    @Action(input = "http://server/LabWebService/deleteGodRequest", output = "http://server/LabWebService/deleteGodResponse", fault = {
        @FaultAction(className = EmptyArgException.class, value = "http://server/LabWebService/deleteGod/Fault/EmptyArgException"),
        @FaultAction(className = MySQLException.class, value = "http://server/LabWebService/deleteGod/Fault/MySQLException")
    })
    public String deleteGod(
        @WebParam(name = "id", targetNamespace = "")
        int id)
        throws EmptyArgException, MySQLException
    ;

    /**
     * 
     * @param id
     * @return
     *     returns java.util.List<client_gen.God>
     * @throws MySQLException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getGodsById", targetNamespace = "http://server/", className = "client_gen.GetGodsById")
    @ResponseWrapper(localName = "getGodsByIdResponse", targetNamespace = "http://server/", className = "client_gen.GetGodsByIdResponse")
    @Action(input = "http://server/LabWebService/getGodsByIdRequest", output = "http://server/LabWebService/getGodsByIdResponse", fault = {
        @FaultAction(className = MySQLException.class, value = "http://server/LabWebService/getGodsById/Fault/MySQLException")
    })
    public List<God> getGodsById(
        @WebParam(name = "id", targetNamespace = "")
        int id)
        throws MySQLException
    ;

    /**
     * 
     * @return
     *     returns byte[]
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getImage", targetNamespace = "http://server/", className = "client_gen.GetImage")
    @ResponseWrapper(localName = "getImageResponse", targetNamespace = "http://server/", className = "client_gen.GetImageResponse")
    @Action(input = "http://server/LabWebService/getImageRequest", output = "http://server/LabWebService/getImageResponse")
    public byte[] getImage();

    /**
     * 
     * @param culture
     * @param name
     * @return
     *     returns java.util.List<client_gen.God>
     * @throws MySQLException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getGodsByNameAndCulture", targetNamespace = "http://server/", className = "client_gen.GetGodsByNameAndCulture")
    @ResponseWrapper(localName = "getGodsByNameAndCultureResponse", targetNamespace = "http://server/", className = "client_gen.GetGodsByNameAndCultureResponse")
    @Action(input = "http://server/LabWebService/getGodsByNameAndCultureRequest", output = "http://server/LabWebService/getGodsByNameAndCultureResponse", fault = {
        @FaultAction(className = MySQLException.class, value = "http://server/LabWebService/getGodsByNameAndCulture/Fault/MySQLException")
    })
    public List<God> getGodsByNameAndCulture(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "culture", targetNamespace = "")
        String culture)
        throws MySQLException
    ;

    /**
     * 
     * @param culture
     * @param godOf
     * @return
     *     returns java.util.List<client_gen.God>
     * @throws MySQLException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getGodsByCultureAndGodOf", targetNamespace = "http://server/", className = "client_gen.GetGodsByCultureAndGodOf")
    @ResponseWrapper(localName = "getGodsByCultureAndGodOfResponse", targetNamespace = "http://server/", className = "client_gen.GetGodsByCultureAndGodOfResponse")
    @Action(input = "http://server/LabWebService/getGodsByCultureAndGodOfRequest", output = "http://server/LabWebService/getGodsByCultureAndGodOfResponse", fault = {
        @FaultAction(className = MySQLException.class, value = "http://server/LabWebService/getGodsByCultureAndGodOf/Fault/MySQLException")
    })
    public List<God> getGodsByCultureAndGodOf(
        @WebParam(name = "culture", targetNamespace = "")
        String culture,
        @WebParam(name = "god_of", targetNamespace = "")
        String godOf)
        throws MySQLException
    ;

}
